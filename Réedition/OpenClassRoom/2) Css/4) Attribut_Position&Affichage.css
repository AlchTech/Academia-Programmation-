Il existe deux type de positionnement :
inline : En ligne
block : En colonne

Nous pouvons modifier le type d'affichage ! Attention seul les éléments block peuveut être redimensionner:
inline -> block 
Selecteur{display: block;}
block -> inline 
Selecteur{display: flex;}
inline & block
Selecteur{display: inline-block;}

/* | Positionnement */
/* Permet définir la position des éléments dans une page HTML */
Selecteur{
	/* Permet de placè un objet à un endroit sur la page */
	position: absolute;
	/* Permet de faire suivre le contenue le long de la page */
	position: static;

	/* Permet de positionner l'élément */
	top: 10%;
	bottom: 10%;
	left: 10%;
	right: 10%;
	
	/* En cas de superposition permet de définir l'ordre d'affichage*/
	z-index: 2}


/* | Flex */
/*Pour utilisé flexbox il faut se servir de l'attribut */
Selecteur{
	display: flex;

	ligne | colonne
	/* Permet de mettre votre contenu en ligne ou en colonne */
	flex-direction: row;
	flex-direction: column;

	Retour à la ligne
	/* Wrap permet au contenu de retourner à la ligne quand il à atteint la limite de la boite */
	flex-wrap: wrap;

	Caché des élément
	/*En cas de dépassement(caché)*/
	overflow: hidden;
	/* Permet de caché du contenu */
	visibility: hidden;
	/* Permet de montrer que une partis de l'élémentn */
	clip: rect(0em 10em 10em 0em);


	Verticalement
	/* Permet de positionné le contenu verticalement dans le container */
	/* Occupe l'espace disponible de gauche à droite en mettant des marges entre chaque objet et sur les cotés */
	justify-content: space-around;
	/* Occupe l'espace disponible gauche à droite en mettant des marges entre chaque objet */
	justify-content: space-between;
	/* aligne les objets au centre, au début(gauche), ou la fin(droite) */
	justify-content: center;
	justify-content: flex-start;
	justify-content: flex-end;

	Horizontalement
	/* Permet de positionné le contenu horizontalement dans le container */
	/* Occupe l'espace disponible de haut en bas en mettant des marges entre chaque objet et sur les cotés */
	align-content: space-around;
	/* Occupe l'espace disponible de haut en bas en mettant des marges entre chaque objet */
	align-content: space-between;
	/* Occupe l'espace disponible en agrandissant le contenue de haut en bas */
	align-content: stretch;
	/* aligne les objets au centre, au début(haut), ou la fin(bas) */
	align-content: center;
	align-content: flex-start;
	align-content: flex-end;

	Alignement des objets
	/* Permet d'aligner les objets sur une seule ligne, cela évite les décalages entre plusieur contenu*/
	/* Aligne le contenu sur la ligne du haut et du bas */
	align-items: stretch;
	/* Aligne le contenu sur un ligne directrice centrale, haut du contenue ou bas du contenu */
	align-items: center;
	align-items: flex-start;
	align-items: flex-end;
}

Permet de aligner un contenu verticalement
selecteur:nth-child(2){
	align-self: stretch;
	align-self: center;
	align-self: flex-start;
	align-self: flex-end;

	/* Permet de définir sont ordre dans l'affichage il faut définir l'ordre de tous les éléments*/
	order: 3;

	Permet de redimensionner les éléments flex
	Largeur
	flex-grow: 20%;
	Adapate élément en fonction des autres
	flex-basis: auto;
	????
	flex-shrink: 20%;

	}

/* || Grid */
Permet de positionner des contenue à des endroit des précis.

#container {
	width: 100%;
	height: 100%;
	/* Permet de dire que c'est une GRID */
  display: grid;
  /* Indique le nombre de colonne avec leur occupation */
  grid-template-columns: 25% 25% 25% 25%;
  /* Indique le nombre de ligne avec leur occupation */
  grid-template-rows: 50% 50%;
  /* Indique la marge */
  gap: 10rem 10rem;
  /* Indique leur positionnement sur la page */
  grid-template-areas:
    "C1 C2 C4 C6"
    "C1 C3 C5 C6";
	}

.class img{
	width: 100%;
	height: 100%;
	object-fit: cover;
	object-position: center;}

.C1 .C6{
	grid-area: C1;
	grid-area: C6;
	width: 100%;
	height: 100%;}

.C2 .C3 .C4 .C5 { 
	grid-area: C2;
	grid-area: C3;
	grid-area: C4;
	grid-area: C5; 
	width: 100%;
	height: 100%;}

